* Docker
> convert applications into docker images which can be run as docker containers on other machines with docker installed

* Commands
> docker {command}

** run {-d} {application}
> docker run nginx
- run instance of nginx application in docker container if it already exists
  - else we pull the image from docker hub and use that
*** -d
- runs a detached instance in the background

** attach {container_name/id}
> docker attach cool_container
- reattach container instance

** ps
- list running containers
*** ps -a
- list all containers

** stop {container_name/id}
> docker stop cool_container
> docker stop 123456789
- stop a container

** rm {container_name/id}
> docker rm cool_container
- remove a container
  - can type only first part of container id if there are no conflicts

** images
- list images

** rmi {image}
- remove an image
  - ensure no containers are running off the image
  - delete all dependent containers

** pull {image}
> docker pull nginx
- download an image from docker hub

** exec {container_name} {command}
> docker exec ubuntu_container cat /etc/hosts
*** A container only lives as long as the process inside it is alive
- if the process stops/crashes, the container exits

** inspect {container_name}
> docker inspect cool_container
- inspect a container in JSON form

** logs {container_name}
> docker inspect cool_container
- view output from a container running in the background

* Run arguments

** Tags
> docker run redis:latest (default)
> docker run redis:4.0
- docker image versions

** Input
*** -i
- interactive mode
  - read input from stdin
*** -t
- terminal
  - display terminal prompts
**** -it
- combine -i, -t

* Mapping external (host):internal (container)

** Port Mapping
- allow users outside of the container to access the docker host

> docker run -p 80:5000 webapp
- map external port 80 to internal port 5000
  - run multiple instances of applications and map to different ports

** Volume Mapping
- docker containers have their own filesystem
- map a directory outside the docker host to a directory inside the container
> docker run -v /external/directory:/docker/directory/sql sql_container
- ex. save db data before we destroy a sql container

* Environment Variables
> docker run -e ENV_VARIABLE=epic cool_container
- we can find the list of environment variables using `docker inspect``
